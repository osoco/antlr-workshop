buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
     }
    dependencies {
        classpath "org.antlr:antlr4:${antlrVersion}"
        classpath "org.antlr:antlr4-runtime:${antlrVersion}"
        classpath "ch.raffael.gradlePlugins.antlr4:gradle-antlr4-plugin:1.0"
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    }
}

version '0.0.1-SNAPSHOT'

group "es.osoco.workshops.antlr"

apply plugin: 'ch.raffael.antlr4'
apply plugin: 'idea'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'codenarc'
apply plugin: 'antlr'

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {
    compile "org.antlr:antlr4:${antlrVersion}"
    runtime "org.antlr:antlr4-runtime:${antlrVersion}"
    antlr "org.antlr:antlr4:${antlrVersion}"
    compile 'es.osoco.logging:java-logging:0.6'
    compile 'commons-cli:commons-cli:1.4'
    compile 'org.jetbrains:annotations:18.0.0'
    compile 'io.netty:netty-transport:4.1.44.Final'
    compile 'io.netty:netty-buffer:4.1.44.Final'
}

antlr4 {
    version = '4.7.2'
    listener = true
    visitor = true
    runtimePackage = 'org.antlr.v4.runtime'
    destination = file("target/generated-sources/antlr4")
    generateDir = file("target/generated-sources/antlr4-intermediate")
}

idea {
    module {
        sourceDirs += file("target/generated-sources/antlr4")
        sourceDirs += file("target/generated-sources/antlr4-intermediate")
    }
}

task serverJar(type: Jar) {
  dependsOn classes
  manifest {
    attributes "Main-Class": 'es.osoco.workshops.antlr.server.cli.ServerCLI'
  }
  include '**/*.jar'
  include '**/*.class'
  include '**/*.properties'
  baseName = 'server'
  from sourceSets.main.output.classesDirs
  from sourceSets.main.output.resourcesDir
}

task serverShadowJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
  dependsOn serverJar
  manifest {
    inheritFrom project.tasks.serverJar.manifest
  }
  baseName = 'server-withdeps'
  from sourceSets.main.runtimeClasspath
  from {
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  }
}

test {
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }

    finalizedBy 'codenarcMain'
    finalizedBy 'codenarcTest'
}

codenarc {
    toolVersion = '1.0'
    configFile = new File(projectDir, 'config/codenarc/rules.groovy')
    maxPriority1Violations = 0
    maxPriority2Violations = 0
    maxPriority3Violations = 0
}
